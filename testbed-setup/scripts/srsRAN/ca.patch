diff --git a/lib/src/mac/pdu.cc b/lib/src/mac/pdu.cc
index 121413a59..42c926aab 100644
--- a/lib/src/mac/pdu.cc
+++ b/lib/src/mac/pdu.cc
@@ -770,6 +770,7 @@ bool sch_subh::set_scell_activation_cmd(const std::array<bool, SRSLTE_MAX_CARRIE
   for (uint8_t i = 1; i < SRSLTE_MAX_CARRIERS; ++i) {
     w_payload_ce[0] |= (static_cast<uint8_t>(active_scell_idxs[i]) << i);
   }
+  printf("[ca-debug] w_payload_ce=%d,size=%lu\n",unsigned(w_payload_ce[0]),active_scell_idxs.size()-1);
   lcid = (uint32_t)dl_sch_lcid::SCELL_ACTIVATION;
   ((sch_pdu*)parent)->update_space_ce(nof_octets);
   nof_bytes = nof_octets;
diff --git a/srsenb/src/stack/mac/scheduler_carrier.cc b/srsenb/src/stack/mac/scheduler_carrier.cc
index f1c872284..5829a9cb2 100644
--- a/srsenb/src/stack/mac/scheduler_carrier.cc
+++ b/srsenb/src/stack/mac/scheduler_carrier.cc
@@ -322,10 +322,20 @@ const sf_sched_result& sched::carrier_sched::generate_tti_result(uint32_t tti_rx
 
     bool dl_active = sf_dl_mask[tti_sched->get_tti_tx_dl() % sf_dl_mask.size()] == 0;
 
+    //bool is_scell = false;
+    //for (auto& ue_pair : *ue_db) {
+    //	if (ue_pair.second.get_cell_index(enb_cc_idx).second > 0) {
+    //	    is_scell = true;
+    //	    // log_h->info("[ca-debug] rnti=0x%x, cc_idx=%d is SCell\n", &ue_pair.first, enb_cc_idx)
+    //	    break;
+    //	}
+    //}
+    //if (!is_scell) {
     /* Schedule PHICH */
     for (auto& ue_pair : *ue_db) {
       tti_sched->alloc_phich(&ue_pair.second, &sf_result->ul_sched_result);
     }
+    //}
 
     /* Schedule DL control data */
     if (dl_active) {
@@ -342,6 +352,7 @@ const sf_sched_result& sched::carrier_sched::generate_tti_result(uint32_t tti_rx
 
     /* Prioritize PDCCH scheduling for DL and UL data in a RoundRobin fashion */
     if ((tti_rx % 2) == 0) {
+      //if (!is_scell)
       alloc_ul_users(tti_sched);
     }
 
@@ -349,6 +360,7 @@ const sf_sched_result& sched::carrier_sched::generate_tti_result(uint32_t tti_rx
     alloc_dl_users(tti_sched);
 
     if ((tti_rx % 2) == 1) {
+      //if (!is_scell)
       alloc_ul_users(tti_sched);
     }
 
diff --git a/srsenb/src/stack/mac/scheduler_grid.cc b/srsenb/src/stack/mac/scheduler_grid.cc
index 7a995a01d..a79b8688b 100644
--- a/srsenb/src/stack/mac/scheduler_grid.cc
+++ b/srsenb/src/stack/mac/scheduler_grid.cc
@@ -722,7 +722,7 @@ bool sf_sched::alloc_phich(sched_ue* user, sched_interface::ul_sched_res_t* ul_s
   auto& phich_list = ul_sf_result->phich[ul_sf_result->nof_phich_elems];
 
   auto p = user->get_cell_index(cc_cfg->enb_cc_idx);
-  if (not p.first) {
+  if (not p.first || p.second != 0) {
     // user does not support this carrier
     return false;
   }
diff --git a/srsenb/src/stack/mac/scheduler_metric.cc b/srsenb/src/stack/mac/scheduler_metric.cc
index 3184d5edf..74b340919 100644
--- a/srsenb/src/stack/mac/scheduler_metric.cc
+++ b/srsenb/src/stack/mac/scheduler_metric.cc
@@ -240,7 +240,7 @@ ul_harq_proc* ul_metric_rr::allocate_user_retx_prbs(sched_ue* user)
     return nullptr;
   }
   auto p = user->get_cell_index(cc_cfg->enb_cc_idx);
-  if (not p.first) {
+  if (not p.first || p.second != 0) {
     // this cc is not activated for this user
     return nullptr;
   }
@@ -282,7 +282,7 @@ ul_harq_proc* ul_metric_rr::allocate_user_newtx_prbs(sched_ue* user)
     return nullptr;
   }
   auto p = user->get_cell_index(cc_cfg->enb_cc_idx);
-  if (not p.first) {
+  if (not p.first || p.second != 0) {
     // this cc is not activated for this user
     return nullptr;
   }
diff --git a/srsenb/src/stack/mac/ue.cc b/srsenb/src/stack/mac/ue.cc
index eb6c6879c..b07575852 100644
--- a/srsenb/src/stack/mac/ue.cc
+++ b/srsenb/src/stack/mac/ue.cc
@@ -487,7 +487,12 @@ void ue::allocate_ce(srslte::sch_pdu* pdu, uint32_t lcid)
           phy->set_activation_deactivation_scell(rnti, active_scell_list);
           Info("CE:    Added SCell Activation CE.\n");
           // Allocate and initialize Rx/Tx softbuffers for new carriers (exclude PCell)
-          allocate_cc_buffers(active_scell_list.size() - 1);
+	  int active_sum = 0;
+	  for (size_t i = 0; i < active_scell_list.size(); i++) {
+		  active_sum += active_scell_list[i];
+	  }
+	  allocate_cc_buffers(active_sum);
+	  Info("[ca-debug] Finish allocating and initializing buffers, num=%d.\n", active_sum);
         } else {
           Error("CE:    Setting SCell Activation CE\n");
         }
diff --git a/srsenb/src/stack/rrc/rrc.cc b/srsenb/src/stack/rrc/rrc.cc
index d754dda44..93b5efbcb 100644
--- a/srsenb/src/stack/rrc/rrc.cc
+++ b/srsenb/src/stack/rrc/rrc.cc
@@ -1951,8 +1951,8 @@ int rrc::ue::fill_scell_to_addmod_list(asn1::rrc::rrc_conn_recfg_r8_ies_s* conn_
     nonul_cfg.phich_cfg_r10                             = cc_cfg->mib.phich_cfg;
     nonul_cfg.pdsch_cfg_common_r10                      = cc_cfg_sib.pdsch_cfg_common;
     // RadioResourceConfigCommonSCell-r10::ul-Configuration-r10
-    cell.rr_cfg_common_scell_r10.ul_cfg_r10_present          = true;
-    auto& ul_cfg                                             = cell.rr_cfg_common_scell_r10.ul_cfg_r10;
+    cell.rr_cfg_common_scell_r10.ul_cfg_r10_present          = false;
+    /* auto& ul_cfg                                             = cell.rr_cfg_common_scell_r10.ul_cfg_r10;
     ul_cfg.ul_freq_info_r10.ul_carrier_freq_r10_present      = true;
     ul_cfg.ul_freq_info_r10.ul_carrier_freq_r10              = cc_cfg->cell_cfg.ul_earfcn;
     ul_cfg.p_max_r10_present                                 = cell_sib1.p_max_present;
@@ -1963,6 +1963,7 @@ int rrc::ue::fill_scell_to_addmod_list(asn1::rrc::rrc_conn_recfg_r8_ies_s* conn_
     ul_cfg.srs_ul_cfg_common_r10                             = cc_cfg_sib.srs_ul_cfg_common;
     ul_cfg.ul_cp_len_r10.value                               = cc_cfg_sib.ul_cp_len.value;
     ul_cfg.pusch_cfg_common_r10                              = cc_cfg_sib.pusch_cfg_common;
+    */
     // RadioResourceConfigDedicatedSCell-r10
     cell.rr_cfg_ded_scell_r10_present                                       = true;
     cell.rr_cfg_ded_scell_r10.phys_cfg_ded_scell_r10_present                = true;
@@ -1977,19 +1978,19 @@ int rrc::ue::fill_scell_to_addmod_list(asn1::rrc::rrc_conn_recfg_r8_ies_s* conn_
     nonul_cfg_ded.pdsch_cfg_ded_r10.p_a.value                           = parent->cfg.pdsch_cfg.value;
     cell.rr_cfg_ded_scell_r10.phys_cfg_ded_scell_r10.ul_cfg_r10_present = true;
     auto& ul_cfg_ded                                  = cell.rr_cfg_ded_scell_r10.phys_cfg_ded_scell_r10.ul_cfg_r10;
-    ul_cfg_ded.ant_info_ul_r10_present                = true;
-    ul_cfg_ded.ant_info_ul_r10.tx_mode_ul_r10_present = true;
-    asn1::number_to_enum(ul_cfg_ded.ant_info_ul_r10.tx_mode_ul_r10, parent->cfg.cell.nof_ports);
-    ul_cfg_ded.pusch_cfg_ded_scell_r10_present           = true;
-    ul_cfg_ded.ul_pwr_ctrl_ded_scell_r10_present         = true;
-    ul_cfg_ded.ul_pwr_ctrl_ded_scell_r10.p0_ue_pusch_r10 = 0;
-    ul_cfg_ded.ul_pwr_ctrl_ded_scell_r10.delta_mcs_enabled_r10.value =
-        ul_pwr_ctrl_ded_scell_r10_s::delta_mcs_enabled_r10_opts::en0;
-    ul_cfg_ded.ul_pwr_ctrl_ded_scell_r10.accumulation_enabled_r10   = true;
-    ul_cfg_ded.ul_pwr_ctrl_ded_scell_r10.psrs_offset_ap_r10_present = true;
-    ul_cfg_ded.ul_pwr_ctrl_ded_scell_r10.psrs_offset_ap_r10         = 3;
-    ul_cfg_ded.ul_pwr_ctrl_ded_scell_r10.pathloss_ref_linking_r10.value =
-        ul_pwr_ctrl_ded_scell_r10_s::pathloss_ref_linking_r10_opts::scell;
+    ul_cfg_ded.ant_info_ul_r10_present                = false;
+    // ul_cfg_ded.ant_info_ul_r10.tx_mode_ul_r10_present = true;
+    // asn1::number_to_enum(ul_cfg_ded.ant_info_ul_r10.tx_mode_ul_r10, parent->cfg.cell.nof_ports);
+    ul_cfg_ded.pusch_cfg_ded_scell_r10_present           = false;
+    ul_cfg_ded.ul_pwr_ctrl_ded_scell_r10_present         = false;
+    // ul_cfg_ded.ul_pwr_ctrl_ded_scell_r10.p0_ue_pusch_r10 = 0;
+    // ul_cfg_ded.ul_pwr_ctrl_ded_scell_r10.delta_mcs_enabled_r10.value =
+    //    ul_pwr_ctrl_ded_scell_r10_s::delta_mcs_enabled_r10_opts::en0;
+    //ul_cfg_ded.ul_pwr_ctrl_ded_scell_r10.accumulation_enabled_r10   = true;
+    //ul_cfg_ded.ul_pwr_ctrl_ded_scell_r10.psrs_offset_ap_r10_present = true;
+    //ul_cfg_ded.ul_pwr_ctrl_ded_scell_r10.psrs_offset_ap_r10         = 3;
+    //ul_cfg_ded.ul_pwr_ctrl_ded_scell_r10.pathloss_ref_linking_r10.value =
+    //    ul_pwr_ctrl_ded_scell_r10_s::pathloss_ref_linking_r10_opts::scell;
     ul_cfg_ded.cqi_report_cfg_scell_r10_present                               = true;
     ul_cfg_ded.cqi_report_cfg_scell_r10.nom_pdsch_rs_epre_offset_r10          = 0;
     ul_cfg_ded.cqi_report_cfg_scell_r10.cqi_report_periodic_scell_r10_present = true;
